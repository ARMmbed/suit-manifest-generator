outer-wrapper = {
    authentication-wrapper,
    manifest,
    ? pre-install-ext,
    ? install-ext,
    ? post-install-ext,
    ? text-info-ext,
    ? coswid-ext,
}

authentication-wrapper = (1: $auth-wrapper-types) 
manifest = (2: suit-manifest)
pre-install-ext = (3: bytes .cbor pre-installation-info)
install-ext = (4: bytes .cbor installation-info)
post-install-ext = (5: bytes .cbor post-installation-info)
text-info-ext = (6: bytes .cbor firmware-intent)
coswid-ext = (7: $coswid)

$coswid /= bytes
$coswid /= concise-software-identity

concise-software-identity = bytes ; placeholder

$auth-wrapper-types /= COSE_Mac_Tagged
$auth-wrapper-types /= COSE_Sign_Tagged
$auth-wrapper-types /= COSE_Mac0_Tagged
$auth-wrapper-types /= COSE_Sign1_Tagged

label = int / tstr
values = any

COSE_Signature =  [
    Headers,
    signature : bstr
]

COSE_Mac_Tagged = any ; TBD
COSE_Sign_Tagged = any ; TBD
COSE_Mac0_Tagged = any ; TBD
COSE_Sign1_Tagged = any ; TBD
COSE_Encrypt = any
COSE_Encrypt0 = any

COSE_Mac0 = [
      Headers,
      payload : bytes / nil,
      tag : bstr,
   ]

Headers = (
    protected : empty_or_serialized_map,
    unprotected : header_map
)

header_map = { Generic_Headers,
               * label => values
             }

empty_or_serialized_map = bstr .cbor header_map / bstr .size 0

Generic_Headers = (
   ? 1 => int / text,  ; algorithm identifier
   ? 2 => [ + label ],     ; criticality
   ? 3 => text / int,  ; content type
   ? 4 => bytes,           ; key identifier
   ? 5 => bytes,           ; IV
   ? 6 => bytes,           ; Partial IV
   ? 7 => COSE_Signature / [ +COSE_Signature ], ; Counter signature
)

COSE_Digest = COSE_Mac0

suit-manifest = {
    manifest-version,
    sequence-number,
    ? pre-install,
    ? dependencies,
    ? payloads,
    ? install,
    ? post-install,
    ? intent,
    ? coswid-entry,
}

manifest-version = (1: 1)
sequence-number = (2: uint)
pre-install = (3: pre-installation-info / COSE_Digest)
dependencies = (4: [ + dependency-info ])
payloads = (5: [ + payload-info ])
install = (6: installation-info / COSE_Digest)
post-install = (7: post-installation-info / COSE_Digest)
intent = (8: firmware-intent / COSE_Digest)
coswid-entry = (9: $coswid / COSE_Digest)

dependency-info = {
    dep-digest   ; digest of the resource
    dep-scope,   ; where the dependency's 
                 ; payloads will be applied
    ? dep-uris,  ; where to find the resource
                 ; applied
}

dep-digest = (1: COSE_Digest)
dep-scope = (2: component-identifier)
dep-uris = (3: uri-list)

uri-list = [ + [ priority: int,
                 link: uri,
               ]
           ]
component-identifier = [ * bytes ]

payload-info = {
    payload-component,
    payload-size,
    payload-digest,
    ? regen-info,
}

payload-component = (1: component-identifier)
payload-size = (2: uint / nil)
payload-digest = (3: COSE_Digest)
regen-info = (4: { regen-digest,
                   regen-type,
                   ? regen-parameters,
                 }
             )
regen-digest = (5: COSE_Digest)
regen-type = (6: regen-types)
regen-parameters = (7: regen-parameter)

regen-types = location-length-regen-type /
              file-list-regen-type /
              key-list-regen-type /
              custom-regen-type

location-length-regen-type = 1
file-list-regen-type = 2
key-list-regen-type = 3
custom-regen-type = nint

regen-parameter = location-length-regen-parameters /
                  file-list-regen-parameters /
                  key-list-regen-parameters /
                  custom-regen-parameters

location-length-regen-parameters = [ * [ location: uint,
                                         length: uint,
                                       ]
                                   ]
file-list-regen-parameters = [ * file: text ]
key-list-regen-parameters = [ * key: text ]
custom-regen-parameters = bytes

pre-installation-info = {
    ? pre-conditions,
    ? pre-directives,
}

pre-conditions = (1: [ + pre-condition ])
pre-directives = (2: [ + pre-directive ])

pre-condition = ( id-condition /
                  time-condition /
                  image-condition /
                  battery-level-condition /
                  custom-condition )

id-condition  = [ vendor : 1,
                  id : uuid,
                ] /
                [ class : 2,
                  id : uuid,
                ] /
                [ device : 3,
                  id: uuid,
                ]

uuid = bstr .size 16

time-condition  = [ use-by: 4,
                    time: time-stamp,
                  ]
image-condition  = [ current-content : 6,  
                     digest: COSE_Digest / nil,
                     location: component-identifier,
                   ] /
                   [ not-current-content : 7,  
                     digest: COSE_Digest / nil,
                     location: component-identifier,
                   ]
battery-level-condition = [ battery-level: 8,
                            level: uint,
                          ]
custom-condition = [ nint,
                     parameters : bytes,
                   ]

time-stamp = uint

pre-directive = ( wait-until-directive /
                  day-of-week-directive /
                  time-of-day-directive /
                  battery-level-directive /
                  external-power-directive /
                  custom-directive )

wait-until-directive = [ 1,
                         timestamp: uint,
                       ]
day-of-week-directive = [ 2,
                          day: 0..6,
                        ]
time-of-day-directive = [ 3,
                          hours: 0..23,
                          ? minutes: 0..59,
                          ? seconds: 0..59,
                        ]
battery-level-directive = [ 4,
                            level: uint,
                          ]
external-power-directive = 5
network-disconnect-directive = 6
custom-directive = [ nint,
                     ? parameters: bytes,
                   ]
installation-info = { payload-installation-infos }
payload-installation-infos = (1: [ + payload-installation-info ])
payload-installation-info = { install-component,
                              ? payload-processors,
                              ? allow-override,
                              ? payload-installer,
                            }
install-component = (1: component-identifier)
payload-processors = (2: [ + processor ])
allow-override = (3: bool)
payload-installer = (4: { payload-installer-id,
                          ? payload-installer-parameters,
                        }
                    )
payload-installer-id = (5: [ * int ])
payload-installer-parameters = (6: bytes)

processor = {  processor-ids,
               parameters,
               inputs,
            }

processor-ids = (1: [ * int ])
parameters = (2: COSE_Digest / COSE_Encrypt / COSE_Encrypt0 / int / text / bytes / nil)
inputs = (3: uri-list / component-identifier / {int => int})

post-installation-info = {
    ? post-conditions,
    ? post-directives,
}

post-conditions = (1: [ + post-condition ])
post-directives = (2: [ + post-directive ])

post-condition = image-condition / custom-condition
post-directive = custom-directive

firmware-intent = { * lang }

lang = (uint: text)
