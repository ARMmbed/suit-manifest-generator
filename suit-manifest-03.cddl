outer-wrapper = {
    authentication-wrapper : $auth-wrapper-types,
    manifest : suit-manifest,
    ? pre-install-ext : bytes .cbor pre-installation-info,
    ? install-ext : bytes .cbor installation-info,
    ? post-install-ext : bytes .cbor post-installation-info,
    ? text-info-ext : bytes .cbor firmware-intent,
    ? coswid-ext : $coswid,
}

authentication-wrapper = 1
manifest = 2
pre-install-ext = 3
install-ext = 4
post-install-ext = 5
text-info-ext = 6
coswid-ext = 7

$coswid /= bytes
$coswid /= concise-software-identity

concise-software-identity = bytes ; placeholder

$auth-wrapper-types /= COSE_Mac_Tagged
$auth-wrapper-types /= COSE_Sign_Tagged
$auth-wrapper-types /= COSE_Mac0_Tagged
$auth-wrapper-types /= COSE_Sign1_Tagged

label = int / tstr
values = any

COSE_Signature =  [
    Headers,
    signature : bstr
]

COSE_Mac_Tagged = any ; TBD
COSE_Sign_Tagged = any ; TBD
COSE_Mac0_Tagged = any ; TBD
COSE_Sign1_Tagged = any ; TBD
COSE_Encrypt = any
COSE_Encrypt0 = any

COSE_Mac0 = [
      Headers,
      payload : bytes / nil,
      tag : bstr,
   ]

Headers = (
    protected : empty_or_serialized_map,
    unprotected : header_map
)

header_map = { Generic_Headers,
               * label => values
             }

empty_or_serialized_map = bstr .cbor header_map / bstr .size 0

Generic_Headers = (
   ? 1 => int / text,  ; algorithm identifier
   ? 2 => [ + label ],     ; criticality
   ? 3 => text / int,  ; content type
   ? 4 => bytes,           ; key identifier
   ? 5 => bytes,           ; IV
   ? 6 => bytes,           ; Partial IV
   ? 7 => COSE_Signature / [ +COSE_Signature ], ; Counter signature
)

COSE_Digest = COSE_Mac0

suit-manifest = {
    manifest-version : 1,
    sequence-number : uint,
    ? pre-install : pre-installation-info / COSE_Digest,
    ? dependencies : [ + dependency-info ],
    ? payloads : [ + payload-info ],
    ? install : installation-info / COSE_Digest,
    ? post-install : post-installation-info / COSE_Digest,
    ? intent : firmware-intent / COSE_Digest,
    ? coswid-entry : $coswid / COSE_Digest,
}

manifest-version = 1
sequence-number = 2
pre-install = 3
dependencies = 4
payloads = 5
install = 6
post-install = 7
intent = 8
coswid-entry = 9

dependency-info = {
    dep-digest  : COSE_Digest,          ; digest of the resource
    dep-scope   : component-identifier, ; where the dependency's 
                                        ; payloads will be applied
    ? dep-uris  : uri-list              ; where to find the resource
                                        ; applied
}

dep-digest = 1
dep-scope = 2
dep-uris = 3

uri-list = [ + [ priority: int,
                 link: uri,
               ]
           ]
component-identifier = [ * bytes ]

payload-info = {
    payload-component : component-identifier,
    payload-size : uint / nil,
    payload-digest : COSE_Digest,
    ? regen-info : { regen-digest : COSE_Digest,
                     regen-type : regen-types,
                     ? regen-parameters: regen-parameter,
                   },
}
payload-component = 1
payload-size      = 2
payload-digest    = 3
regen-info        = 4
regen-digest      = 5
regen-type        = 6
regen-parameters  = 7

regen-types = location-length-regen-type /
              file-list-regen-type /
              key-list-regen-type /
              custom-regen-type

location-length-regen-type = 1
file-list-regen-type = 2
key-list-regen-type = 3
custom-regen-type = nint

regen-parameter = location-length-regen-parameters /
                  file-list-regen-parameters /
                  key-list-regen-parameters /
                  custom-regen-parameters

location-length-regen-parameters = [ * [ location: uint,
                                         length: uint,
                                       ]
                                   ]
file-list-regen-parameters = [ * file: text ]
key-list-regen-parameters = [ * key: text ]
custom-regen-parameters = bytes

pre-installation-info = {
    ? pre-conditions : [ + pre-condition ],
    ? pre-directives : [ + pre-directive ],
}

pre-conditions = 1
pre-directives = 2

pre-condition = ( id-condition /
                  time-condition /
                  image-condition /
                  battery-level-condition /
                  custom-condition )

id-condition  = [ vendor : 1,
                  id : uuid,
                ] /
                [ class : 2,
                  id : uuid,
                ] /
                [ device : 3,
                  id: uuid,
                ]

uuid = bstr .size 16

time-condition  = [ use-by: 4,
                    time: time-stamp,
                  ]
image-condition  = [ current-content : 6,  
                     digest: COSE_Digest / nil,
                     location: component-identifier,
                   ] /
                   [ not-current-content : 7,  
                     digest: COSE_Digest / nil,
                     location: component-identifier,
                   ]
battery-level-condition = [ battery-level: 8,
                            level: uint,
                          ]
custom-condition = [ nint,
                     parameters : bytes,
                   ]

time-stamp = uint

pre-directive = ( wait-until-directive /
                  day-of-week-directive /
                  time-of-day-directive /
                  battery-level-directive /
                  external-power-directive /
                  custom-directive )

wait-until-directive = [ 1,
                         timestamp: uint,
                       ]
day-of-week-directive = [ 2,
                          day: 0..6,
                        ]
time-of-day-directive = [ 3,
                          hours: 0..23,
                          ? minutes: 0..59,
                          ? seconds: 0..59,
                        ]
battery-level-directive = [ 4,
                            level: uint,
                          ]
external-power-directive = 5
network-disconnect-directive = 6
custom-directive = [ nint,
                     ? parameters: bytes,
                   ]
installation-info = { payload-installation-infos : [ + payload-installation-info ]
}
payload-installation-infos = 1
payload-installation-info = { install-component : component-identifier,
                              ? payload-processors : [ + processor ],
                              ? allowOverride : bool,
                              ? payloadInstaller:  { payloadInstallerID: [ * int ],
                                                     ? payloadInstallerParameters: bstr,
                                                   }
                            }
install-component = 1
payload-processors = 2
allow-oOverride = 3
payload-installer = 4
payload-installer-id = 5
payload-installer-parameters = 6

processor = {  processor-ids : [ * int ],
               parameters :  COSE_Digest / COSE_Encrypt / COSE_Encrypt0 / 
                             int / text / bytes / nil,
               inputs : uri-list / component-identifier / {int => int},
            }

post-installation-info = {
    ? post-conditions : [ + post-condition ],
    ? post-directives : [ + post-directive ],
}

post-conditions = 1
post-directives = 2

post-condition = image-condition / custom-condition
post-directive = custom-directive

firmware-intent = {
    * lang => tstr
}

lang = uint
